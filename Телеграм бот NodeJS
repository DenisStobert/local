const express = require('express');
const dotenv = require('dotenv');
dotenv.config();
process.env.NTBA_FIX_319 = 1;
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');
const connectDB = require('./mongodb/connect.js');
const Balance = require('./mongodb/models/balanceAccount.js');
const Counter = require('./mongodb/models/renderCounter.js');
 
 

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const server_url = "https://aisitegen.onrender.com";
const bot_server_url = "https://telegrambotwhitepagegen.onrender.com";

 
const token = process.env.TELEGRAM_API_TOKEN;
const url = process.env.APP_URL || 'https://telegrambotwhitepagegen.onrender.com';

const apiKey = process.env.CRYPTOCLOUD_API_KEY; // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á



const bot = new TelegramBot(token, { webHook: true });

//const cryptomus_api_key = 'a1f4e96fd62885e88eebef38ca772b05e758688e' // process.env.CRYPTOMUS_API_KEY;
//const cryptomus_merchant_id = '1836857f-ec32-445f-b655-19bc97008436' // process.env.CRYPTOMUS_MERCHANT_ID;

// PAY 


const baseUrl = "https://api.cryptocloud.plus/v2/";


const SECRET_KEY = process.env.SECRET_KEY //'0EJxdARiyjOH9cnHCADYr9e1c6kn4yfTR3Ha';


// END PAY




//a1f4e96fd62885e88eebef38ca772b05e758688e
// 1836857f-ec32-445f-b655-19bc97008436

bot.setWebHook(`${url}/${token}`);

bot.setMyCommands([{ command: 'menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]);

app.post(`/${token}`, (req, res) => {
    bot.processUpdate(req.body);
    console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞:", req.body);
    res.sendStatus(200);
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
app.get('/api/v1/payment/successful-payment', (req, res) => {
    res.send('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
app.get('/api/v1/payment/failed-payment', (req, res) => {
    res.send('–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç CryptoCloud
app.post('/api/v1/payment', (req, res) => {
    const { order_id, status } = req.body;

    if (status === 'paid') {
        bot.sendMessage(order_id, '‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–π—Ç–∞.');
        startSiteGeneration(order_id); // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞
    } else {
        bot.sendMessage(order_id, '‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }

    res.sendStatus(200);
});

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
const options = {
    site_theme: [
        'üè¢ –ë–∏–∑–Ω–µ—Å', 'üíÑ –ó–¥–æ—Ä–æ–≤—å–µ –∏ –∫—Ä–∞—Å–æ—Ç–∞', 'üíπ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è', 'üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'üè• –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ',
        'üëó –ú–æ–¥–∞', 'üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏', '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 'üç≥ –ö—É–ª–∏–Ω–∞—Ä–∏—è', 'üèÖ –°–ø–æ—Ä—Ç',
        'üíµ –§–∏–Ω–∞–Ω—Å—ã', 'ü©∫ –ú–µ–¥–∏—Ü–∏–Ω–∞',
        'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', 'üèõÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 'üé® –î–∏–∑–∞–π–Ω',
        'üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', 'üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'üì¢ –†–µ–∫–ª–∞–º–∞', 'üì£ PR', 'üóÇÔ∏è –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
        'üèñÔ∏è –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', 'üé® –•–æ–±–±–∏', 'üîß –†–µ–º–æ–Ω—Ç', 'üè† –ò–Ω—Ç–µ—Ä—å–µ—Ä', 'üñºÔ∏è –ò—Å–∫—É—Å—Å—Ç–≤–æ',
        'üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'üéµ –ú—É–∑—ã–∫–∞', 'üé¨ –§–∏–ª—å–º—ã', 'üé≠ –¢–µ–∞—Ç—Ä', 'üå∏ –§–ª–æ—Ä–∏—Å—Ç–∏–∫–∞',
        'üåø –°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ', 'üêæ –ñ–∏–≤–æ—Ç–Ω—ã–µ', 'üêï –î–æ–º–∞—à–Ω–∏–µ –ø–∏—Ç–æ–º—Ü—ã', 'üèπ –û—Ö–æ—Ç–∞',
        'üé£ –†—ã–±–∞–ª–∫–∞', 'üöµ –ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö', 'üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 'üíª IT', 'üåê –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
        '‚úçÔ∏è –ë–ª–æ–≥–∏', 'üí¨ –§–æ—Ä—É–º—ã', 'üõí –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–æ–º–º–µ—Ä—Ü–∏—è', 'üè® –û—Ç–µ–ª—å',  'üé≤ –ö–∞–∑–∏–Ω–æ', 'üí∞ –ö—Ä–∏–ø—Ç–æ'
    ],
    site_language: [
        'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 'üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π', 'üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', 'üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π',
        'üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', 'üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π', 'üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π', 'üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π', 'üá∏üá¶ –ê—Ä–∞–±—Å–∫–∏–π', 'üáßüá© –ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π',
        'üáÆüá≥ –•–∏–Ω–¥–∏', 'üáÆüá© –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π', 'üá≤üáæ –ú–∞–ª–∞–π—Å–∫–∏–π', 'üáπüá∑ –¢—É—Ä–µ—Ü–∫–∏–π',
        'üáªüá≥ –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π', 'üáπüá≠ –¢–∞–π—Å–∫–∏–π', 'üáµüá≠ –§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–π', 'üáÆüá± –ò–≤—Ä–∏—Ç',
        'üáµüá± –ü–æ–ª—å—Å–∫–∏–π', 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π', 'üá®üáø –ß–µ—à—Å–∫–∏–π', 'üá∏üá™ –®–≤–µ–¥—Å–∫–∏–π',
        'üá≥üá¥ –ù–æ—Ä–≤–µ–∂—Å–∫–∏–π', 'üá©üá∞ –î–∞—Ç—Å–∫–∏–π', 'üá´üáÆ –§–∏–Ω—Å–∫–∏–π', 'üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∏–π',
        'üá≠üá∫ –í–µ–Ω–≥–µ—Ä—Å–∫–∏–π', 'üá∑üá¥ –†—É–º—ã–Ω—Å–∫–∏–π', 'üá∏üá∞ –°–ª–æ–≤–∞—Ü–∫–∏–π', 'üá±üáπ –õ–∏—Ç–æ–≤—Å–∫–∏–π',
        'üá±üáª –õ–∞—Ç–≤–∏–π—Å–∫–∏–π', 'üá™üá™ –≠—Å—Ç–æ–Ω—Å–∫–∏–π', 'üá∑üá∏ –°–µ—Ä–±—Å–∫–∏–π', 'üá≠üá∑ –•–æ—Ä–≤–∞—Ç—Å–∫–∏–π',
        'üáßüá¨ –ë–æ–ª–≥–∞—Ä—Å–∫–∏–π', 'üáÆüá∏ –ò—Å–ª–∞–Ω–¥—Å–∫–∏–π', 'üá≤üá∞ –ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π', 'üá∏üáÆ –°–ª–æ–≤–µ–Ω—Å–∫–∏–π',
        'üá≤üáπ –ú–∞–ª—å—Ç–∏–π—Å–∫–∏–π', 'üá¨üá™ –ì—Ä—É–∑–∏–Ω—Å–∫–∏–π', 'üá¶üá≤ –ê—Ä–º—è–Ω—Å–∫–∏–π', 'üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π',
        'üá¶üá± –ê–ª–±–∞–Ω—Å–∫–∏–π', 'üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π', 'üáßüáæ –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π', 'üá∞üáø –ö–∞–∑–∞—Ö—Å–∫–∏–π'
    ],
    contact_country: [
        'üá∫üá∏ –°–®–ê', 'üá®üá¶ –ö–∞–Ω–∞–¥–∞', 'üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 'üá≥üáø –ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è',
        'üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è', 'üáÆüá™ –ò—Ä–ª–∞–Ω–¥–∏—è', 'üáÆüá± –ò–∑—Ä–∞–∏–ª—å', 'üá™üá∏ –ò—Å–ø–∞–Ω–∏—è',
        'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', 'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è', 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è', 'üáÆüáπ –ò—Ç–∞–ª–∏—è',
        'üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', 'üáßüá™ –ë–µ–ª—å–≥–∏—è', 'üá®üá≠ –®–≤–µ–π—Ü–∞—Ä–∏—è', 'üá∏üá™ –®–≤–µ—Ü–∏—è',
        'üá≥üá¥ –ù–æ—Ä–≤–µ–≥–∏—è', 'üá©üá∞ –î–∞–Ω–∏—è', 'üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è', 'üá¶üáπ –ê–≤—Å—Ç—Ä–∏—è',
        'üá¨üá∑ –ì—Ä–µ—Ü–∏—è', 'üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è', 'üáµüá± –ü–æ–ª—å—à–∞', 'üá®üáø –ß–µ—Ö–∏—è',
        'üá∏üá∞ –°–ª–æ–≤–∞–∫–∏—è', 'üá≠üá∫ –í–µ–Ω–≥—Ä–∏—è', 'üá≠üá∑ –•–æ—Ä–≤–∞—Ç–∏—è', 'üá∑üá∏ –°–µ—Ä–±–∏—è',
        'üáßüá¨ –ë–æ–ª–≥–∞—Ä–∏—è', 'üá∑üá¥ –†—É–º—ã–Ω–∏—è', 'üá±üáπ –õ–∏—Ç–≤–∞', 'üá±üáª –õ–∞—Ç–≤–∏—è',
        'üá™üá™ –≠—Å—Ç–æ–Ω–∏—è', 'üáÆüá∏ –ò—Å–ª–∞–Ω–¥–∏—è', 'üá±üá∫ –õ—é–∫—Å–µ–º–±—É—Ä–≥', 'üá≤üá® –ú–æ–Ω–∞–∫–æ',
        'üá¶üá© –ê–Ω–¥–æ—Ä—Ä–∞', 'üá∏üá≤ –°–∞–Ω-–ú–∞—Ä–∏–Ω–æ', 'üá±üáÆ –õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω', 'üá≤üáπ –ú–∞–ª—å—Ç–∞',
        'üá®üáæ –ö–∏–ø—Ä', 'üá¨üá™ –ì—Ä—É–∑–∏—è', 'üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è', 'üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω',
        'üáπüá∑ –¢—É—Ä—Ü–∏—è', 'üá∑üá∫ –†–æ—Å—Å–∏—è', 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å', 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞',
        'üá≤üá© –ú–æ–ª–¥–∞–≤–∏—è', 'üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω'
    ],
    site_count: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
    sub_categories: {
        'üé≤ –ö–∞–∑–∏–Ω–æ': [
            '–†–µ–º–æ–Ω—Ç –ö–∞–∑–∏–Ω–æ –∏ –û—Ç–µ–ª–µ–π',
            'IT –¥–ª—è –∫–∞–∑–∏–Ω–æ',
            '–ë–∏–∑–Ω–µ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–∞–∑–∏–Ω–æ',
            '–û—Ç–µ–ª–∏ –∫–∞–∑–∏–Ω–æ'
        ],
        'üí∞ –ö—Ä–∏–ø—Ç–æ': [
            '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ –≤ –∫—Ä–∏–ø—Ç–æ',
            '–üO –¥–ª—è –∫—Ä–∏–ø—Ç–æ',
            '–£—Å–ª—É–≥–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –≤ –∫—Ä–∏–ø—Ç–æ',
            '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –¥–ª—è –∫—Ä–∏–ø—Ç–æ',
            '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–æ–≤',
            '–ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ',
            '–ü–æ–º–æ—â—å –≤ –∑–∞–ø—É—Å–∫–µ –∫—Ä–∏–ø—Ç–æ'
        ]
    },
    'file_extension': ['PHP', 'HTML']
};

// –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª—é—á–µ–π –∏ –ø–æ–ª–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
const shortToFullMap = {
    'üé≤ –ö–∞–∑–∏–Ω–æ': 'üé≤ –ö–∞–∑–∏–Ω–æ',
    'st_sc:0': '–†–µ–º–æ–Ω—Ç –ö–∞–∑–∏–Ω–æ –∏ –û—Ç–µ–ª–µ–π',
    'st_sc:1': 'IT —É—Å–ª—É–≥–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ',
    'st_sc:2': '–ë–∏–∑–Ω–µ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ',
    'st_sc:3': '–û—Ç–µ–ª–∏ –∫–∞–∑–∏–Ω–æ',
    'üí∞ –ö—Ä–∏–ø—Ç–æ': 'üí∞ –ö—Ä–∏–ø—Ç–æ',
    'st_sc:4': '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
    'st_sc:5': '–ü—Ä–æ–≥—Ä–∞–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–±–∏—Ä–∂ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
    'st_sc:6': '–£—Å–ª—É–≥–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–ø—Ä–æ–µ–∫—Ç–æ–≤',
    'st_sc:7': '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
    'st_sc:8': '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–æ–≤',
    'st_sc:9': '–ü–æ–º–æ—â—å —Å –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
    'st_sc:10': '–ü–æ–º–æ—â—å –≤ –∑–∞–ø—É—Å–∫–µ –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–æ–≤'
};

const formState = {};

const sendMainMenuOld = (chatId) => {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ —á–∞—Ç: ${chatId}`);
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ù–∞—á–∞—Ç—å', callback_data: 'generate_site' }],
            ],
        },
    });
};


const sendMainMenu = (chatId) => {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ —á–∞—Ç: ${chatId}`);
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!', {
        reply_markup: {
            keyboard: [
                [{ text: 'üöÄ –°—Ç–∞—Ä—Ç' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
};
 

const sendBottomMenu = (chatId) => {

     

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', {
        reply_markup: {
            keyboard: [
                [    
                    { text: 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä', callback_data: 'generate_site' },
                    { text: 'üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –°—á–µ—Ç', callback_data: 'buy_tokens' }
                ],
                [
                    { text: 'üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'user_profile' },
                    { text: 'üí° –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'user_support' }
                ],
                [
                    { text: 'üíµ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ö—É–ø–æ–Ω', callback_data: 'apply_coupon' } 
                ]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
    const new_chatId = chatId;
};



const sendLanguageSelectionMenu = (chatId) => {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please select a language:', {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–†—É—Å—Å–∫–∏–π', callback_data: 'language:ru' },
                    { text: 'English', callback_data: 'language:en' }
                ]
            ]
        }
    });
};



const sendOptionsTwoColumnsOld = (chatId, key, optionsArray) => {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è ${key} –≤ —á–∞—Ç: ${chatId}`);

    const inline_keyboard = [];
    for (let i = 0; i < optionsArray.length; i += 2) {
        inline_keyboard.push([
            { text: optionsArray[i], callback_data: `${key}:${optionsArray[i]}` },
            optionsArray[i + 1] ? { text: optionsArray[i + 1], callback_data: `${key}:${optionsArray[i + 1]}` } : null
        ].filter(Boolean));
    }

    const message = `–í—ã–±–µ—Ä–∏—Ç–µ ${key === 'site_theme' ? '–¢–µ–º—É –°–∞–π—Ç–∞' : key === 'site_language' ? '–Ø–∑—ã–∫ –°–∞–π—Ç–∞' : key === 'contact_country' ? '–°—Ç—Ä–∞–Ω—É –ö–æ–Ω—Ç–∞–∫—Ç–∞' : key.replace(/_/g, ' ')}:`;

    bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard,
        },
    });
};


//newe keyboard

const sendOptionsTwoColumns = (chatId, key, optionsArray) => {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è ${key} –≤ —á–∞—Ç: ${chatId}`);

    const keyboard = [];
    for (let i = 0; i < optionsArray.length; i += 2) {
        keyboard.push([
            { text: optionsArray[i] },
            optionsArray[i + 1] ? { text: optionsArray[i + 1] } : null
        ].filter(Boolean));
    }

    const message = `–í—ã–±–µ—Ä–∏—Ç–µ ${key === 'site_theme' ? '–¢–µ–º—É –°–∞–π—Ç–∞' : key === 'site_language' ? '–Ø–∑—ã–∫ –°–∞–π—Ç–∞' : key === 'contact_country' ? '–°—Ç—Ä–∞–Ω—É –ö–æ–Ω—Ç–∞–∫—Ç–∞' : key.replace(/_/g, ' ')}:`;

    bot.sendMessage(chatId, message, {
        reply_markup: {
            keyboard: keyboard,
            resize_keyboard: true,
            one_time_keyboard: true,
        },
    });
};


const askForInputWithSkip = (chatId, key, skipStep) => {
    const message = `–í–≤–µ–¥–∏—Ç–µ ${key === 'key_words' ?  `–ö–ª—é—á–µ–≤—ã–µ –°–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'` : key === 'stop_words' ? `–°—Ç–æ–ø –°–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'` : key.replace(/_/g, ' ')}:`;
    bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `skip:${skipStep}` }],
            ],
        },
    });
};

const askForInput = (chatId, key) => {
    bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ ${key.replace(/_/g, ' ')}:`);
};

const startSiteGenerationBalance = async (chatId) => {
    const siteTheme = formState[chatId].site_theme;  // Main site theme
    const subCategories = formState[chatId].sub_categories || [];  // Selected subcategories

    // Combine site theme with subcategories for site_theme field
    const siteThemeWithSubCategories = [siteTheme, ...subCategories.map(index => shortToFullMap[`st_sc:${index}`])].join(', ');

    const inputs = {
        webhook: `${server_url}/webhook/?user_id=${chatId}`,
        user_id: chatId,
        site_type: 'Landing',
        file_extension: formState[chatId].file_extension,
        site_count: formState[chatId].site_count || '1',
        rename_index: 'false',
        edit_after_generation: 'true',
        site_theme: siteThemeWithSubCategories,
        site_language: formState[chatId].site_language,
        contact_country: formState[chatId].contact_country,
        key_words: formState[chatId].key_words || '',
        stop_words: formState[chatId].stop_words || '',
        domain_name: formState[chatId].domain_name,

    };

    console.log('–í–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', inputs);

    //–ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞
    let balance = await Balance.findOne({ chatId });
    let  balance_ok = 'false'
    console.log('balance', balance)

    try {
        if (balance) {
            console.log('balance try', balance)
                let count = formState[chatId].site_count || '1';
                console.log('count', count)
                let price = process.env.WHITE_PRICE
                let balance_check =  balance.balance
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if (price * count > balance_check) {
                    bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç.');
                    sendPaymentOptionsSubscription(chatId);
                } else {
                    balance_ok = 'true'; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
                    balance.balance -= price * count;
                    balance_check =  balance.balance;
                    console.log('balance_check', balance_check )
                    await balance.save();

                    const response = await axios.post(`${server_url}/api/v1/generatorTelegram`, inputs);
                    if (response.status === 200) {
                        // bot.sendMessage(chatId, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–π—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç.');
                        console.log('–°–ï–†–í–ï–† –ì–ï–ù–ï–†–ê–¶–ò–ò: ‚úÖ status === 200.')
                      

                    } else {
                        console.log('–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
                        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                    }
                }
              
        }
    
        

           

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
};



const startSiteGeneration = async (chatId) => {
    const siteTheme = formState[chatId].site_theme;  // Main site theme
    const subCategories = formState[chatId].sub_categories || [];  // Selected subcategories

    // Combine site theme with subcategories for site_theme field
    const siteThemeWithSubCategories = [siteTheme, ...subCategories.map(index => shortToFullMap[`st_sc:${index}`])].join(', ');

    const inputs = {
        webhook: `${server_url}/webhook/?user_id=${chatId}`,
        user_id: chatId,
        site_type: 'Landing',
        file_extension: formState[chatId].file_extension,
        site_count: formState[chatId].site_count || '1',
        rename_index: 'false',
        edit_after_generation: 'true',
        site_theme: siteThemeWithSubCategories,
        site_language: formState[chatId].site_language,
        contact_country: formState[chatId].contact_country,
        key_words: formState[chatId].key_words || '',
        stop_words: formState[chatId].stop_words || '',
        domain_name: formState[chatId].domain_name,

    };

    console.log('–í–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', inputs);

    //–ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞
    let counter = await Counter.findOne({ chatId });
    let  counter_ok = 'false'
    console.log('counter', counter)

    try {
        if (counter) {
            console.log('counter_try', counter)
                let count = formState[chatId].site_count || '1';
                console.log('count', count)
                let price = process.env.WHITE_PRICE
                let counter_check =  counter.render_counter
                let dateLastPurchaseCheck = counter.last_purchase_date;

                const now = new Date();
                const oneMonthAgo = new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000)); 
                if (counter.last_purchase_date < oneMonthAgo) {
                    counter.render_counter = 0;
                    await counter.save();
                    bot.sendMessage(chatId, '–ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –í–∞—à–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç.');
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if ( count > counter_check) {
                    bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç.');
                    sendPaymentOptionsSubscription(chatId);
                } else {
                    counter_ok = 'true'; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
                    counter_check.render_counter -= count;
                    counter_check_check =  counter_check.render_counter;
                    console.log('counter_check', counter_check )
                    await counter.save();

                    const response = await axios.post(`${server_url}/api/v1/generatorTelegram`, inputs);
                    if (response.status === 200) {
                        // bot.sendMessage(chatId, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–π—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç.');
                        console.log('–°–ï–†–í–ï–† –ì–ï–ù–ï–†–ê–¶–ò–ò: ‚úÖ status === 200.')
                      

                    } else {
                        console.log('–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
                        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                    }
                }
              
        }
        else{  bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç.  /menu');
            return;
        }
    
        

           

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
};










/// 

const askForSiteCount = (chatId) => {
    const inline_keyboard = options.site_count.map(count => [{
        text: count,
        callback_data: `site_count:${count}`
    }]);
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', {
        reply_markup: {
            inline_keyboard,
        },
    });
};






const askForSubCategories = (chatId, theme) => {
    const subCats = options.sub_categories[theme] || [];
    if (subCats.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        askForSiteCount(chatId);
    } else {
        const inline_keyboard = subCats.map((subCat, index) => [{
            text: subCat,
            callback_data: `sub_categories:${index}` // Index used instead of full text
        }]);
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
            reply_markup: {
                inline_keyboard,
            },
        });
    }
};

// Add the available file extensions to the options
const fileExtensionOptions = ['PHP', 'HTML'];

// Function to send file extension options
const askForFileExtension = (chatId) => {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç: ${chatId}`);
    const inline_keyboard = fileExtensionOptions.map(option => ({
        text: option,
        callback_data: `file_extension:${option}` // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    }));

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', {
        reply_markup: {
            inline_keyboard: [inline_keyboard]
        }
    });
};

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    sendMainMenu(chatId);
   // sendBottomMenu(chatId); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É
});


 


bot.onText(/\/menu/, (msg) => {
    const chatId = msg.chat.id;
    sendBottomMenu(chatId);
});


const askForLanguage = (chatId) => {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å–∞–π—Ç–∞ –≤ —á–∞—Ç: ${chatId}`);
    sendOptionsTwoColumns(chatId, 'site_language', options.site_language);
}

const askForCountry = (chatId) => {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ —á–∞—Ç: ${chatId}`);
    sendOptionsTwoColumns(chatId, 'contact_country', options.contact_country);
}


//69$  - 100 –≤–∞–π—Ç–æ–≤

//89$ - 200 –≤–∞–π—Ç–æ–≤ 

//109 - 300 –≤–∞–π—Ç–æ–≤

//129$ - 400 —Å–∞–π—Ç–æ–≤ 

//149$ - 500 –≤–∞–π—Ç–æ–≤



const sendPaymentOptionsSubscription = (chatId) => {
    const paymentOptions = [
        [{ text: '$69 - 100 –í–∞–π—Ç–æ–≤', callback_data: 'payment:69' }, { text: '$89 - 200 –í–∞–π—Ç–æ–≤', callback_data: 'payment:89' }],
        [{ text: '$109 - 300 –≤–∞–π—Ç–æ–≤', callback_data: 'payment:109' }, { text: '$129 - 400 –≤–∞–π—Ç–æ–≤', callback_data: 'payment:129' }],
        [{ text: '$149 - 500 –≤–∞–π—Ç–æ–≤', callback_data: 'payment:149' }] //{ text: '–î—Ä—É–≥–∞—è –°—É–º–º–∞', callback_data: 'payment:alt' }
    ];

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞:', {
        reply_markup: {
            inline_keyboard: paymentOptions
        }
    });
};



const sendPaymentOptions = (chatId) => {
    const paymentOptions = [
        [{ text: '$1', callback_data: 'payment:1' }, { text: '$5', callback_data: 'payment:5' }],
        [{ text: '$10', callback_data: 'payment:10' }, { text: '$20', callback_data: 'payment:20' }],
        [{ text: '$50', callback_data: 'payment:50' }, { text: '$100', callback_data: 'payment:100' }],
        [{ text: '$300', callback_data: 'payment:300' }, { text: '$500', callback_data: 'payment:500' }]
    ];

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞:', {
        reply_markup: {
            inline_keyboard: paymentOptions
        }
    });
};
 



 

async function createInvoice(apiKey, invoiceData) {
    const url = 'https://api.cryptocloud.plus/v1/invoice/create';
    
    try {
        const response = await axios.post(url, invoiceData, {
            headers: {
                'Authorization': `Token ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });
        return response.data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API CryptoCloud:', error);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—ë –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
    }
}

async function sendProfile(chatId) {
    let user_id = chatId;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 
    let balance = await Balance.findOne({ user_id });
    let counter = await Counter.findOne({ user_id });
   
    const now = new Date();
    const oneMonthAgo = new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000)); // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥

    let actual_balance = 0;
    let actual_counter = 0;
   
     
    if (counter){
        if (counter.last_purchase_date < oneMonthAgo) {
            counter.render_counter = 0;
            if (balance) {
                balance.balance = 0;
                await balance.save();
            }
            await counter.save();
        }
        if (balance) {
            actual_balance = balance.balance;
        }
        actual_counter = counter.render_counter;
    }

  

    bot.sendMessage(chatId, `–ê–∫–∫–∞—É–Ω—Ç ID: ${chatId}, 
        ‚îó‚úÖ STATS:
        ‚îó –ë–∞–ª–∞–Ω—Å: ${actual_balance} USD 
        ‚îó –í–∞–π—Ç—ã: ${actual_counter}`);
}
 
let setInvoice = '';
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É

async function createPayment(chatId, amount) {
    console.log(`–ó–∞–ø—É—Å–∫ createPayment —Å —Å—É–º–º–æ–π: ${amount}`);
    
   

    const invoiceData = {
        amount: amount.toString(),
        currency: "USD",
        order_id: chatId,
        shop_id: 'tPOQBDANTCRRZ4ZQ',
        email: "example@example.com",  // –¢–µ—Å—Ç–æ–≤—ã–π email
        payer_currency: "USD",
        success_url: "https://telegrambotwhitepagegen.onrender.com/api/v1/payment/successful-payment",
        fail_url: "https://telegrambotwhitepagegen.onrender.com/api/v1/payment/failed-payment",
        callback_url: "https://telegrambotwhitepagegen.onrender.com/api/payment",
        desc: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞"
    };

    try {
        const response = await axios.post('https://api.cryptocloud.plus/v1/invoice/create', invoiceData, {
            headers: {
                'Authorization': `Token ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.data && response.data.status === "success") {

            const paymentUrl = response.data.pay_url;
            const invoice_id = response.data.invoice_id;
            setInvoice = invoice_id;

            bot.sendMessage(chatId, `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentUrl}`);
            console.log(`–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}: ${paymentUrl}`);

        } else {

            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', response.data);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');

        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API CryptoCloud:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}



let couponCode = ''; 

const askForCoupon = (chatId) => {
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞:')
        .then(() => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∫—É–ø–æ–Ω–∞
            formState[chatId].currentStep = 'coupon_code';
        });
};
 
let coupon = '';

const sendCouponCode = async (chatId, couponCode) => {
    bot.sendMessage(chatId, '–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ø–æ–Ω...')
    coupon  = couponCode;
    let user_id = chatId;
    try {
        const response = await axios.post(`${server_url}/api/v1/couponCounter`, { user_id, coupon });
        if (response.status === 200) {
            console.log('–ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
            
        } else {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É–ø–æ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', response.status);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É–ø–æ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
    }
};



bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const [key, value] = callbackQuery.data.split(':').map(v => v.trim());

    if (!formState[chatId]) {
        formState[chatId] = {};
    }



    if (formState[chatId][key] && formState[chatId][key] === value) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä: ${key}:${value}`);
        return;
    }
    if (key.startsWith('language:')) {
        const selectedLanguage = data.split(':')[1];
        if (selectedLanguage === 'ru') {
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.sendMessage(chatId, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π');
            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        } else if (selectedLanguage === 'en') {
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.sendMessage(chatId, 'You have selected: English');
            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        }
    }
    else
    if (key === 'buy_tokens') {
        sendPaymentOptionsSubscription(chatId);
    } else if (key === 'payment') {
        const amount = parseInt(value, 10);
        await createPayment(chatId, amount);
        console.log(`–ó–∞–ø—É—Å–∫ createPayment —Å —Å—É–º–º–æ–π: ${amount}`);
         
    } else if (key === 'apply_coupon') {
        askForCoupon(chatId); // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫—É–ø–æ–Ω–∞
    }

    else if (key === 'send_coupon_code') {
       await sendCouponCode(chatId, couponCode);
        console.log(`–∫—É–ø–æ–Ω: ${couponCode}`);
         
    } 
    
    
    
    else if (key === 'generate_site') {
        formState[chatId] = {};
        sendOptionsTwoColumns(chatId, 'site_theme', options['site_theme']);

    } 
        else if (key === 'skip') {

        if (value === 'key_words') {
            formState[chatId].key_words = ''; // Skip the key_words input
            askForInputWithSkip(chatId, 'stop_words', 'stop_words'); // Next step is stop_words
            formState[chatId].currentStep = 'stop_words';
        } 
        else if (value === 'stop_words') {
            formState[chatId].stop_words = ''; // Skip the stop_words input
            askForInput(chatId, 'domain_name'); // Next step is domain_name
            formState[chatId].currentStep = 'domain_name';
        } 
        else if (value === 'domain_name') {
            startSiteGeneration(chatId);
        }

        
    } else if (options[key]) {
        formState[chatId][key] = value;

        if (key === 'site_theme') {
            askForSubCategories(chatId, value); // Ask for sub-categories when site_theme is selected
        } 
        else if (key === 'sub_categories') {
           
             if (!Array.isArray(formState[chatId].sub_categories)) {
                console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è sub_categories –∫–∞–∫ –º–∞—Å—Å–∏–≤ –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
                formState[chatId].sub_categories = [];
            }

            formState[chatId].sub_categories.push(value);
            askForSiteCount(chatId); // Ask for site count after sub-categories

        } 
        
        else if (!formState[chatId].site_count) {
            askForSiteCount(chatId); // Request site count next
        } 
        
        else if (!formState[chatId].file_extension) {
            askForFileExtension(chatId); // Request file extension next
        } 
        
        else if (!formState[chatId].site_language) {
            askForLanguage(chatId); // Request site language
        } 
        
        else if (!formState[chatId].contact_country) {
            askForCountry(chatId); // Request contact country
        } 
        
        else if (key === 'file_extension') {
            formState[chatId].file_extension = value;
            // After file extension, request key words
            askForInputWithSkip(chatId, 'key_words', 'key_words');
            formState[chatId].currentStep = 'key_words';
        } 
        
        else {
            // Key words step
            askForInputWithSkip(chatId, 'key_words', 'key_words');
            formState[chatId].currentStep = 'key_words';
        }
    } 
    
    else {
        console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á: ${key}`);
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á ${key}`);
    }
});


// –ü–æ–¥–¥–µ—Ä–∂–∫–∞
const supportLink = 'https://t.me/SPY_AGENCY'

sendSupportLink = (chatId)=> {
    bot.sendMessage(chatId, `–ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${supportLink}`);
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
const generate_site = (chatId) => {
    formState[chatId] = {};
    sendOptionsTwoColumns(chatId, 'site_theme', options['site_theme']);
};



//–ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç —é–∑–µ—Ä–∞

bot.on('message', (msg) => {
    
    const chatId = msg.chat.id;

     if (msg.text === '/start') {
        sendMainMenu(chatId);
    } else if (msg.text === 'üöÄ –°—Ç–∞—Ä—Ç') {
        sendLanguageSelectionMenu(chatId);
    } else if (msg.text === 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä') {
        generate_site(chatId);
    } 
    
    else if (msg.text === 'üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –°—á–µ—Ç') {
        sendPaymentOptionsSubscription(chatId);
    
    } 

    else if (formState[chatId]?.currentStep === 'coupon_code') {
        if (msg.text.startsWith('/')){


        }
        else{

            couponCode = msg.text; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –∫—É–ø–æ–Ω–∞
            sendCouponCode(chatId, couponCode); // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –∫—É–ø–æ–Ω–∞
            delete formState[chatId].currentStep; // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

        }
      
    }

  
    
    else if (msg.text === 'üíµ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ö—É–ø–æ–Ω') {
    askForCoupon(chatId); // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫—É–ø–æ–Ω–∞
    console.log('askForCoupon')
    
    } 
    else if (msg.text === 'üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å') {
        // –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sendProfile(chatId);

    } 
    
    else if (msg.text === 'üí° –ü–æ–¥–¥–µ—Ä–∂–∫–∞') {

        // –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sendSupportLink(chatId);


    } else {
      
        if (!formState[chatId]) {
            formState[chatId] = {};
        }

        const currentStep = formState[chatId].currentStep;

        if (currentStep === 'key_words') {
            formState[chatId].key_words = msg.text;
            askForInputWithSkip(chatId, 'stop_words', 'stop_words'); // Next step is stop_words
            formState[chatId].currentStep = 'stop_words';
        } 
        
        else if (currentStep === 'stop_words') {
            formState[chatId].stop_words = msg.text || ''; // Collect stop_words input
            askForInput(chatId, 'domain_name'); // Next step is domain_name
            formState[chatId].currentStep = 'domain_name';
        } 
        
        else if (currentStep === 'domain_name') {
            formState[chatId].domain_name = msg.text;
            startSiteGeneration(chatId);
            delete formState[chatId].currentStep; // Remove currentStep
        } 
        
        else {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        }
    }
});

bot.on('polling_error', (error) => {
    console.error(error.code);
});


//—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

app.post('/notify', (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', req.body);

    const { user_id, message } = req.body;

    if (!user_id || !message) {
        console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏');
        return res.status(400).send('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }

    bot.sendMessage(user_id, message)
        .then(() => {
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_id}: ${message}`);
            res.status(200).send('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
        })
        .catch((err) => {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_id}:`, err.message);
            res.status(500).send('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        });
});



//–∫—É–ø–æ–Ω—ã

app.post('/notifycoupon', (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', req.body);

    const { user_id, message } = req.body;

    if (!user_id || !message) {
        console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏');
        return res.status(400).send('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }

    const textMessage =  message.message;

    bot.sendMessage(user_id, textMessage)
        .then(() => {
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_id}: ${textMessage}`);
            res.status(200).send('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
        })
        .catch((err) => {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user_id}:`, err.message);
            res.status(500).send('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        });
});



// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Cryptomus

app.post('/payment/old', (req, res) => {
    const { order_id, status } = req.body;
    console.log(req.body)
    if (status === 'paid') {
        bot.sendMessage(order_id, '–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–π—Ç–∞.');
        startSiteGeneration(order_id); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    } else {
        bot.sendMessage(order_id, '–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }

    res.sendStatus(200);
});


 
// Middleware to verify the JWT token
const verifyToken = (token) => {
    return new Promise((resolve, reject) => {
        jwt.verify(token, SECRET_KEY, { algorithms: ['HS256'] }, (err, decoded) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', err.message);
                return reject(err);
            }
            resolve(decoded);
        });
    });
};


app.post('/api/payment/', async (req, res) => {
    const { status, invoice_id, amount_crypto, currency, order_id, token } = req.body;
    let show_balance = ''
    console.log('Request token:', token); 
    console.log('Request Body:', req.body); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    console.log('setInvoice', setInvoice);
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
    if (!status || !invoice_id || !amount_crypto || !currency || !order_id || !token) {
        return res.status(400).json({ message: 'Missing required fields' });
    }


    try {
        // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        const decoded = await verifyToken(token);

        let show_counter = '';

        console.log("decoded", decoded.id)

        if (decoded.id === setInvoice) {
            console.log("setInvoice", `${decoded.id} === ${setInvoice}`)
        }
        else{
           
            throw new Error('Invalid invoice ID');
            console.log(`Payment failed for order ${order_id}`);
            bot.sendMessage(order_id, `Payment failed for order ${order_id}`);
            return;
        }
     
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        if (status === 'success') {
            console.log(`Payment successful for order ${order_id}: ${amount_crypto} ${currency}`);
           
             // –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            try {

                
                let user_id = order_id;
                //  –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 
                let balance = await Balance.findOne({ user_id });



        if (balance) {
            // Update the existing counter
              balance.balance += parseFloat(amount_crypto);
              balance.total_spent += parseFloat(amount_crypto);

            show_balance = balance.total_spent

            // Check if the counter has reached or gone below 0
            if (balance.balance <= 0) {
                // return res.status(200).json({ success: false, message: 'You have reached the limit' });
                show_balance = parseFloat(amount_crypto);
            }

            await balance.save();

        } else {
            // Create a new counter
            balance = await Balance.create({
                user_id,
                balance: amount_crypto,
                total_spent: amount_crypto
            });

            show_balance = balance.total_spent
        }
           

        let addCounter = 0;

        let addCounterData =  parseFloat(amount_crypto);

        console.log('addCounterData: ', addCounterData);

        let counter = await Counter.findOne({ user_id });

            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º addCounterData —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            if (addCounterData === 69) {
                addCounter = 100;
                console.log('addCounter 100: ', addCounter);
            } else if (addCounterData === 89) {
                addCounter = 200;
            } else if (addCounterData === 109) {
                addCounter = 300;
            } else if (addCounterData === 129) {
                addCounter = 400;
            } else if (addCounterData === 149) {
                addCounter = 500;
            }


        if (counter) {
            // Update the existing counter
            counter.render_counter += addCounter;

             const now = new Date();
             // const oneMonthAgo = new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000)); // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥

            counter.last_purchase_date = now;


            await counter.save();

            show_counter = counter.render_counter

            console.log('updated show_counter:', show_counter)

            // Check if the counter has reached or gone below 0
            if (counter.render_counter <= 0) {
                // return res.status(200).json({ success: false, message: 'You have reached the limit' });
                 show_counter = addCounter;

                 await balance.save();
            }

            await counter.save();

        } else {

            let render_counter_total;
            let last_purchase_date;
            // Create a new counter
            counter = await Counter.create({
                user_id,
                render_counter: addCounter,
                render_counter_tota: 0,
                last_purchase_date: new Date()

            });

            show_counter = counter.render_counter
        }

         

            } 
            
            catch (error) {
                console.error('Invalid userBalance:', error);
                res.status(403).json({ message: 'DATA BASE ERROR' });
            }
          
            
            // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
           // bot.sendMessage(order_id, `–í–∞—à –±–∞–ª–∞–Ω—Å: $${show_balance}`);
            bot.sendMessage(order_id, `–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount_crypto} ${currency}`);
      
              
            // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
            bot.sendMessage(order_id, `–í—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: ${show_counter} –í–∞–π—Ç–æ–≤`);
           // bot.sendMessage(order_id, `–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount_crypto} ${currency}`);

         
             //generate_site(order_id); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

        } else {
            console.log(`Payment failed for order ${order_id}`);
        }

        res.json({ message: 'Postback received' });
    } catch (error) {
        console.error('Invalid token:', error);
        res.status(403).json({ message: 'Invalid token' });
    }
});

app.post('/api/payment/test', (req, res) => {
    const {
        status,
        invoice_id,
        amount_crypto,
        currency,
        order_id,
        token,
        invoice_info
    } = req.body;

    console.log('Request Body:', req.body);

    try {
        // –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        if (status === 'success') {
            console.log(`Payment successful for Invoice ID: ${invoice_id}`);
            console.log(`Amount: ${amount_crypto} ${currency}`);
            console.log(`Order ID: ${order_id}`);
            
            if (setInvoice === invoice_id) {
                bot.sendMessage(new_chatId, '–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–π—Ç–∞.');
                startSiteGeneration(new_chatId); // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞
            }
        }

        res.json({ message: 'Postback received successfully' });
    } catch (error) {
        console.error('Error processing test payment:', error.message);
        res.status(400).json({ error: 'Payment processing failed' });
    }
});



app.post('/api/payment/test', async (req, res) => {
    
    console.log('Request Body:', req.body);

    // Destructure the request body
    const { status, invoice_id, amount_crypto, currency, order_id, token } = req.body;

    // Check if all fields are present
    if (!status || !invoice_id || !amount_crypto || !currency || !order_id || !token) {
        return res.status(400).json({ message: 'Missing required fields' });
    }

    console.log("Received payment notification:", req.body);

    try {
        // Verify the JWT token
        const decoded = await verifyToken(token);

        // Additional checks (optional)
        if (decoded.invoice_id !== invoice_id) {
            throw new Error('Invalid invoice ID');
        }

        // Process the postback if the status is successful
        if (status === 'success') {
            console.log(`Payment successful for order ${order_id}: ${amount_crypto} ${currency}`);
            if (setInvoice === invoice_id) {
                // Handle successful payment logic
                bot.sendMessage(new_chatId, '–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–π—Ç–∞.');
                startSiteGeneration(new_chatId); // Start site generation process
            }
        } else {
            console.log(`Payment failed for order ${order_id}`);
        }

        res.json({ message: 'Postback received' });
    } catch (error) {
        console.error('Invalid token:', error);
        res.status(403).json({ message: 'Invalid token' });
    }
    res.json({ message: 'Postback received' });
});

app.post('/api/payment/test', (req, res) => {
const { status, invoice_id, amount_crypto, currency   } = req.body;
 

//const chat_id = msg.chat.id;
 

console.log(req.body)

//const token = req.body.token;

  
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ JWT
    try {
       // const decoded = jwt.verify(token, SECRET_KEY, { algorithms: ['HS256'] });
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (—ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ jwt.verify)
       // console.log('JWT Token is valid:', decoded);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
        if (status === 'success') {
            console.log(`Payment successful for Invoice ID: ${invoice_id}`);
            console.log(`Amount: ${amount_crypto} ${currency}`);
            console.log(`Order ID: ${invoice_id}`);

            if (setInvoice === invoice_id){
                          // ... –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ...
            bot.sendMessage(new_chatId, '–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–π—Ç–∞.');
            startSiteGeneration(new_chatId); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            }
          
  
        }

        res.json({ message: 'Postback received successfully' });
    } catch (err) {
        console.error('Invalid JWT token:', err.message);
        res.status(401).json({ error: 'Invalid token' });
    }
});




const startServer = async () => {
    try {
      connectDB(process.env.MONGODB_URL);
      const PORT = process.env.PORT || 3000;

        app.listen(PORT, () => {
            console.log(`–°–µ—Ä–≤–µ—Ä –±–æ—Ç–∞ Telegram –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        });

    } catch (error) {
      console.log(error);
    }
  };
  
  startServer();
