# Техническое задание по модернизации кода

## Цель проекта

Модернизировать существующий код для генерации HTML-сайтов, 

1 Сервер генерации NodeJS
https://drive.google.com/file/d/1tj-94u9p8XVKvaViif7oAxCBITykxkXX/view?usp=sharing

2 Телеграм бот NodeJS
https://drive.google.com/file/d/1GRIW4xeBdxNsWEHJqGgJULBvAMHc6tDg/view?usp=sharing


заменив логику генерации шаблонов на генерацию текста через LLM Replicate API. Также добавить возможность создания промптов для генерации сайтов в различных стилях и учесть требования по интеграции с Телеграм-ботом.

## Содержание

1. [Анализ текущего кода](#анализ-текущего-кода)
2. [Функции для удаления](#функции-для-удаления)
3. [Новые функции для добавления](#новые-функции-для-добавления)
4. [Функции для обновления](#функции-для-обновления)
5. [Интеграция с Телеграм-ботом](#интеграция-с-телеграм-ботом)
6. [Детали реализации](#детали-реализации)
7. [Тестирование](#тестирование)

## Анализ текущего кода

Текущий код использует следующий подход для генерации сайтов:
1. Сбор пользовательских данных через Телеграм-бота
2. Генерация текстового содержимого через OpenAI API
3. Построение HTML-шаблонов из заранее заготовленных частей (sections)
4. Заполнение шаблонов сгенерированным текстом
5. Создание ZIP-архива с готовым сайтом

## Функции для удаления

Функции, связанные со старой логикой генерации шаблонов, подлежат удалению:
- `buildHtmlTemplate`, `buildHtmlTemplatServices`, `buildHtmlTemplatAbout` и т.д.
- `getRandomSection` и другие вспомогательные функции для работы с шаблонами

## Новые функции для добавления

### 1. `generateSiteWithLLM(siteConfig)`

Основная функция для генерации сайта с использованием LLM:

```javascript
async function generateSiteWithLLM(siteConfig) {
  // Параметры сайта
  const { track_id, site_type, site_theme, site_language, contact_country, 
          key_words, site_style, domain_name, special_features } = siteConfig;
  
  // Создание промпта на основе стиля сайта и специальных требований
  const prompt = createPromptByStyle(site_style, siteConfig);
  
  // Отправка запроса к Replicate API
  const siteContent = await replicateLLMRequest(prompt);
  
  // Обработка ответа и создание сайта
  return processLLMResponse(siteContent, siteConfig);
}
```

### 2. `createPromptByStyle(style, siteConfig)`

Функция для создания промпта в зависимости от выбранного стиля сайта, с учетом расширенных параметров:

```javascript
function createPromptByStyle(style, siteConfig) {
  const { 
    site_theme, 
    site_language, 
    contact_country, 
    key_words, 
    domain_name, 
    special_features, 
    humanization_level,
    image_style,
    manual_content
  } = siteConfig;
  
  // Базовый шаблон промпта
  let basePrompt = `Generate a complete HTML website for a ${site_theme} business in ${site_language} language.`;
  
  // Добавление дополнительных инструкций от пользователя
  if (manual_content) {
    basePrompt += ` Specific content requirements: ${manual_content}`;
  }
  
  // Добавление требований по ключевым и стоп-словам
  if (key_words) {
    basePrompt += ` Incorporate the following keywords for SEO purposes: ${key_words}. Make sure they are used naturally in the content.`;
  }
  
  if (siteConfig.stop_words) {
    basePrompt += ` Avoid using these words or phrases: ${siteConfig.stop_words}.`;
  }
  
  // Добавление требований по гуманизации контента
  if (humanization_level === 'high') {
    basePrompt += ` Generate highly humanized content that would pass AI detection tools. Use varied sentence structures, occasional colloquialisms, and natural language patterns. Avoid repetitive phrases and perfect grammar.`;
  }
  
  // Добавление специальных функций
  if (special_features && special_features.includes('registration_form')) {
    basePrompt += ` Include a user-friendly registration form with minimal required fields and quick sign-up process.`;
  }
  
  if (special_features && special_features.includes('calculator')) {
    basePrompt += ` Include an interactive calculator relevant to the ${site_theme} business.`;
  }
  
  // Инструкции по стилю изображений
  if (image_style === 'simple') {
    basePrompt += ` Use simple, clean images in the design.`;
  } else if (image_style === 'design_elements') {
    basePrompt += ` Use design elements, icons, and graphics instead of photographs to avoid AI detection.`;
  }
  
  // Дополнительные элементы промпта в зависимости от стиля
  switch(style) {
    case 'minimalist':
      return `${basePrompt} Use a minimalist design with clean lines, ample white space, and subtle typography. Focus on essential content only. Include a simple navigation, hero section, about section, services, testimonials, and contact form.`;
    
    case 'corporate':
      return `${basePrompt} Create a professional corporate style with a structured layout, blue color palette, and formal typography. Include a navbar, hero section with slider, about us section, services, team profiles, client logos, testimonials, and contact section.`;
    
    case 'creative':
      return `${basePrompt} Design a creative and vibrant website with bold colors, unique typography, and interactive elements. Include an animated hero section, creative services presentation, portfolio gallery, blog section, and innovative contact form.`;
    
    case 'gaming':
      return `${basePrompt} Create a dynamic gaming website with dark theme, vibrant accent colors, gaming-inspired graphics, and interactive elements. Include game showcase sections, leaderboards, user profiles, and gaming community features. Avoid mentioning real money gambling or earnings.`;
    
    case 'ecommerce':
      return `${basePrompt} Develop an e-commerce focused layout with product showcases, featured items section, categories navigation, shopping cart integration, product detail pages, and secure checkout process.`;
    
    default:
      return `${basePrompt} Create a balanced design with standard sections including navigation, hero area, features, about us, services, testimonials, and contact form. Make it responsive and user-friendly.`;
  }
}
```

### 3. `replicateLLMRequest(prompt)`

Функция для отправки запроса к Replicate API:

```javascript
async function replicateLLMRequest(prompt) {
  try {
    const response = await fetch('https://api.replicate.com/v1/models/anthropic/claude-3.7-sonnet/predictions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.REPLICATE_API_TOKEN}`,
        'Content-Type': 'application/json',
        'Prefer': 'wait'
      },
      body: JSON.stringify({
        input: {
          prompt,
          max_tokens: 8192,
          system_prompt: `You are an expert web developer and designer who creates complete HTML websites. 
          Return HTML code for a complete website with multiple pages organized in separate sections.
          For each page, start with a comment <!-- PAGE: page_name.html --> and end with <!-- END PAGE -->.
          Include CSS in a <style> tag in the head section.
          Make sure the site is responsive and works well on mobile devices.
          Include all necessary pages: home, about, services, contact, and any additional pages requested.
          If registration form or calculator is requested, provide functional HTML/CSS/JS implementation.
          Make sure all links between pages work correctly.
          Ensure content feels human-written and varied in structure to avoid AI detection.`
        }
      })
    });
    
    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }
    
    const data = await response.json();
    return data.output;
  } catch (error) {
    console.error('Error in Replicate API request:', error);
    throw error;
  }
}
```

### 4. `processLLMResponse(llmResponse, siteConfig)`

Функция для обработки ответа LLM и создания сайта:

```javascript
async function processLLMResponse(llmResponse, siteConfig) {
  const { track_id, file_extension } = siteConfig;
  
  try {
    // Разделение полученного HTML на отдельные страницы
    const pages = extractPagesFromResponse(llmResponse);
    
    // Подготовка изображений для сайта (можно переиспользовать существующую логику)
    const imageUrls = await prepareImagesForSite(siteConfig);
    
    // Создание ZIP-архива с сайтом
    const zipPath = await createSiteZipArchive(pages, imageUrls, track_id, file_extension);
    
    return {
      status: 'success',
      zipPath,
      message: 'Site generated successfully'
    };
  } catch (error) {
    console.error('Error processing LLM response:', error);
    return {
      status: 'error',
      message: error.message
    };
  }
}
```

### 5. `extractPagesFromResponse(llmResponse)`

Функция для извлечения отдельных страниц из ответа LLM:

```javascript
function extractPagesFromResponse(llmResponse) {
  // Если LLM вернул разные страницы в формате комментариев HTML
  const pageRegex = /<!-- PAGE: (.+?) -->([\s\S]*?)(?=<!-- END PAGE -->|<!-- PAGE:|$)/g;
  let match;
  const pages = {};
  
  while ((match = pageRegex.exec(llmResponse)) !== null) {
    const pageName = match[1];
    const pageContent = match[2].trim();
    pages[pageName] = pageContent;
  }
  
  // Если LLM вернул только одну страницу или нет разделителей
  if (Object.keys(pages).length === 0) {
    pages['index.html'] = llmResponse;
  }
  
  return pages;
}
```

## Функции для обновления

### 1. `processSitesFromSQS`

Обновленная функция для обработки запросов:

```javascript
async function processSitesFromSQS(webhook, track_id, site_type, site_theme, site_language, contact_country, file_extension, site_count, rename_index, edit_after_generation, key_words, stop_words, domain_name, site_style, special_features, humanization_level, image_style, manual_content) {
  try {
    sendToClientWithUserId(track_id, 'Генерируем Вайтпейдж...');
    
    // Подготовка конфигурации для генерации сайта
    const siteConfig = {
      track_id,
      site_type,
      site_theme,
      site_language,
      contact_country,
      file_extension,
      rename_index,
      key_words,
      stop_words,
      domain_name,
      site_style: site_style || 'default',
      special_features: special_features || [],
      humanization_level: humanization_level || 'medium',
      image_style: image_style || 'balanced',
      manual_content: manual_content || ''
    };
    
    // Генерация сайта с помощью LLM
    const result = await generateSiteWithLLM(siteConfig);
    
    if (result.status === 'error') {
      throw new Error(result.message);
    }
    
    // Загрузка ZIP-файла в S3
    const s3BucketName = process.env.AWS_S3_BUCKET_NAME;
    const randomNumber = generateRandom15DigitNumber();
    const s3Key = `${track_id}_${randomNumber}.zip`;
    
    const s3Url = await uploadToS3(result.zipPath, s3BucketName, s3Key);
    
    // Отправка уведомления об успешной генерации
    const webhookUrl = `https://aisitegen.onrender.com/api/v1/generatorTelegram/webhook/?user_id=${encodeURIComponent(track_id)}`;
    await sendToWebhook(webhookUrl, { track_id, s3Url, webhookUrl, status: 'succeeded' });
    
    sendToClientWithUserId(track_id, '✅ Вайтпейдж успешно создан и готов к скачиванию');
    
  } catch (error) {
    console.error('Error processing site:', error);
    sendToClientWithUserId(track_id, { status: 'processing_failed' });
  }
}
```

## Интеграция с Телеграм-ботом

Для интеграции новой функциональности с Телеграм-ботом необходимо добавить новые шаги в диалог с пользователем:

1. **Выбор стиля сайта** - добавить меню с выбором стиля сайта:
   - Минималистичный
   - Корпоративный
   - Креативный
   - Игровой
   - Электронная коммерция
   - Стандартный

2. **Выбор специальных функций** - добавить чекбоксы для выбора дополнительных функций:
   - Форма регистрации
   - Калькулятор
   - Мультиязычность
   - Интерактивные элементы

3. **Уровень гуманизации** - добавить выбор уровня гуманизации текста:
   - Стандартный
   - Высокий (максимально человекоподобный)

4. **Стиль изображений** - добавить выбор стиля изображений:
   - Простые фотографии
   - Графические элементы и иконки
   - Сбалансированный подход

5. **Дополнительные пожелания** - добавить поле для ввода специфичных требований к сайту:
   - Текстовое поле для ввода подробных пожеланий

## Детали реализации

1. **Преимущества новой системы**:
   - Более гибкая генерация сайтов без привязки к предопределенным блокам
   - Возможность создания уникальных стилей и функций
   - Лучшая интеграция пользовательских требований
   - Возможность создания более сложных элементов (регистрация, калькуляторы)

2. **Технические особенности**:
   - Использование API Replicate вместо прямой генерации HTML из шаблонов
   - Более структурированный подход к созданию промптов для LLM
   - Сохранение существующей логики загрузки в S3 и отправки уведомлений

3. **Обработка изображений**:
   - Сохранение текущей логики получения изображений через Unsplash/Pexels
   - Добавление опции использования простых графических элементов вместо фотографий

## Тестирование

1. **Функциональное тестирование**:
   - Проверка работы каждого стиля сайта
   - Проверка генерации специальных элементов (форма регистрации, калькулятор)
   - Проверка различных комбинаций параметров

2. **Интеграционное тестирование**:
   - Проверка интеграции с Телеграм-ботом
   - Проверка загрузки сгенерированных сайтов в S3
   - Проверка отправки уведомлений

3. **Нагрузочное тестирование**:
   - Проверка параллельной обработки запросов
   - Оценка времени генерации в зависимости от сложности запроса

Это дополненное техническое задание учитывает все требования заказчика и содержит комплексный план модернизации системы генерации сайтов с использованием API Replicate и интеграцией с Телеграм-ботом.




## Цель
Модернизировать существующий код для генерации HTML-сайтов, заменив логику генерации шаблонов на генерацию текста через LLM Replicate API и добавить возможность создания промптов для генерации сайтов в различных стилях.

## Задачи

### 1. Удаление устаревшей логики
- Удалить функции, связанные с генерацией текстов шаблонов и их вставкой в HTML
- Удалить функции, обрабатывающие шаблоны и формирующие HTML на основе этих шаблонов

### 2. Добавление новой логики
- Создать функцию для генерации текста через LLM Replicate API
- Разработать систему создания промптов в зависимости от стиля сайта
- Интегрировать новую логику в существующую систему

### 3. Модернизация Telegram-бота
- Добавить в интерфейс бота возможность выбора стиля сайта
- Расширить функциональность для персонализации дизайна

## Технические спецификации

### Функции для удаления
```
buildHtmlTemplate, buildHtmlTemplatServices, buildHtmlTemplatAbout, 
buildHtmlTemplateProduct, buildPhpTemplate, buildPhpTemplateServices, 
buildHtmlTemplateThankyou, buildHtmlTemplateThankyouPHP, 
buildHtmlTemplatePolicy, buildHtmlTemplatePolicyPHP,
buildHtmlTemplateBlog, buildHtmlTemplateBlog2, buildHtmlTemplateBlog3,
buildPHPTemplateBlog, buildPHPTemplateBlog2, buildPHPTemplateBlog3,
getRandomSection
```

### Новые функции

const 

#### 1. `generateTextWithLLM(promptConfig)`
```javascript
async function generateTextWithLLM(promptConfig) {
  const { prompt, systemPrompt } = promptConfig;
  
  try {
    const response = await fetch('https://api.replicate.com/v1/models/anthropic/claude-3.7-sonnet/predictions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.REPLICATE_API_TOKEN}`,
        'Content-Type': 'application/json',
        'Prefer': 'wait'
      },
      body: JSON.stringify({
        input: {
          prompt,
          max_tokens: 8192,
          system_prompt: systemPrompt || "",
          max_image_resolution: 0.5
        }
      })
    });
    
    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }
    
    const data = await response.json();
    return data.output;
  } catch (error) {
    console.error('Error in Replicate API request:', error);
    throw error;
  }
}
```

#### 2. `generatePromptsForHTMLGeneration(style, siteConfig)`
```javascript
function generatePromptsForHTMLGeneration(style, siteConfig) {
  const { site_theme, site_language, contact_country, key_words, domain_name } = siteConfig;
  
  const basePrompt = `
Generate a complete website for a ${site_theme} business in ${site_language} language.
The website should include the following pages:
- Home page with hero section, features, about us, services, products, testimonials, and contact form
- About Us page with company history and mission
- Services page with detailed service descriptions
- Product page showcasing main products
- Contact page with address in ${contact_country} and contact form
- Privacy Policy page
- Three blog posts related to the business theme

Keywords for SEO: ${key_words}
`;

  const styles = {
    minimalist: `
${basePrompt}
Design style: Minimalist
Use a clean, minimal design with ample white space, subtle animations, and focus on typography.
Color scheme: Monochromatic with one accent color
Typography: Sans-serif fonts, clear hierarchy
Layout: Simple grid, lots of white space, clear sections
Design elements: Minimal icons, subtle borders, clean forms
`,
    corporate: `
${basePrompt}
Design style: Corporate Professional
Create a professional business appearance with structured layout and formal elements.
Color scheme: Blue and gray palette with accent colors
Typography: Professional serif and sans-serif combination
Layout: Structured grid, clear business sections, organized information hierarchy
Design elements: Charts, graphs, business icons, formal buttons
`,
    creative: `
${basePrompt}
Design style: Creative and Bold
Design a vibrant and eye-catching website with creative elements and bold interactions.
Color scheme: Vibrant complementary colors
Typography: Creative mix of fonts, playful headings
Layout: Asymmetric layout, creative section breaks, dynamic scrolling
Design elements: Bold graphics, animated elements, creative forms, unique navigation
`,
    ecommerce: `
${basePrompt}
Design style: E-commerce Focused
Develop a shopping-oriented website with product showcases and clear call-to-actions.
Color scheme: Conversion-focused with clear CTAs
Typography: Clean, readable fonts optimized for product descriptions
Layout: Product grid, featured items carousel, category navigation
Design elements: Product cards, rating systems, add-to-cart buttons, checkout elements
`,
    gaming: `
${basePrompt}
Design style: Gaming Portal
Create an immersive gaming-themed website with interactive elements and game-like features.
Color scheme: Dark theme with vibrant neon accents
Typography: Futuristic/game-inspired fonts for headings, readable sans-serif for content
Layout: Immersive sections, game-like navigation, achievement highlights
Design elements: Progress bars, badges, game-inspired buttons, leaderboard-style tables

Include a user registration form and interactive elements like calculators or mini-games.
Avoid mentioning real money earnings or gambling elements.
`,
    luxury: `
${basePrompt}
Design style: Luxury and Premium
Design an elegant and sophisticated website that conveys exclusivity and high-end quality.
Color scheme: Black, gold, and neutral tones
Typography: Elegant serif fonts, refined spacing
Layout: Spacious layout with large imagery, sophisticated animations
Design elements: High-quality product images, subtle animations, elegant forms
`,
    news: `
${basePrompt}
Design style: News/Magazine
Create a content-focused website with clear article layouts and effective content categorization.
Color scheme: Clear readable scheme with category color coding
Typography: News-style headlines, readable body text
Layout: Article grids, featured story sections, sidebar elements
Design elements: Article cards, reading time indicators, share buttons, subscription forms
`
  };
  
  return styles[style] || styles.minimalist;
}
```

#### 3. `processLLMResponse(llmResponse, siteConfig)`
```javascript
async function processLLMResponse(llmResponse, siteConfig) {
  const { track_id, file_extension } = siteConfig;
  
  try {
    // Разделить полученный HTML на отдельные страницы
    const pages = extractPagesFromResponse(llmResponse);
    
    // Получить изображения для сайта
    const imageUrls = await prepareImagesForSite(siteConfig);
    
    // Создать ZIP-архив с сайтом
    const zipPath = await createSiteZipArchive(pages, imageUrls, track_id, file_extension);
    
    return {
      status: 'success',
      zipPath,
      message: 'Site generated successfully'
    };
  } catch (error) {
    console.error('Error processing LLM response:', error);
    return {
      status: 'error',
      message: error.message
    };
  }
}
```

### Обновление основных функций

#### `processSitesFromSQS` (модифицированная)
```javascript
async function processSitesFromSQS(webhook, track_id, site_type, site_theme, site_language, contact_country, file_extension, site_count, rename_index, edit_after_generation, key_words, stop_words, domain_name, site_style = 'minimalist') {
  try {
    sendToClientWithUserId(track_id, 'Генерируем Вайтпейдж...');
    
    // Валидация и подготовка ключевых слов
    if (!key_words || key_words === '') {
      const stop_words_directive = stop_words ? 
        `Do not use any of "stop words": ${stop_words}` : 
        `Do not use any harmful, illegal, unethical, or violent content`;
      
      const keywordsResponse = await jsonResponseMainKeyWords(site_theme, stop_words_directive);
      key_words = keywordsResponse.key_words;
    }
    
    // Обработка домена
    let brandName = '';
    if (domain_name && domain_name.trim() !== '') {
      let processedDomainName = domain_name.trim();
      if (processedDomainName.startsWith('www.')) {
        processedDomainName = processedDomainName.substring(4);
      }
      const domainParts = processedDomainName.split('.');
      if (domainParts.length > 0 && domainParts[0] !== '') {
        brandName = domainParts[0];
      }
    }
    
    // Создание конфигурации сайта
    const siteConfig = {
      track_id,
      site_type,
      site_theme,
      site_language,
      contact_country,
      file_extension,
      rename_index,
      key_words,
      stop_words,
      domain_name: brandName,
      site_style
    };
    
    // Генерация промпта для LLM
    const prompt = generatePromptsForHTMLGeneration(site_style, siteConfig);
    
    // Системный промпт для LLM
    const systemPrompt = `
You are an expert web developer and designer specializing in ${site_style} websites.
Create a complete website in HTML and CSS (embedded in <style> tags).
The HTML should be valid, responsive, and follow modern web standards.
Structure your response to clearly separate different pages with comments like:
<!-- PAGE: index.html -->
<!-- PAGE: about.html -->
<!-- PAGE: services.html -->
etc.

Pay special attention to:
1. Creating human-like content that doesn't appear AI-generated
2. Incorporating the keywords naturally for SEO
3. Making the design responsive for all devices
4. Ensuring all links between pages work correctly
5. Including appropriate images placeholders with descriptive alt text
`;
    
    sendToClientWithUserId(track_id, '🖋️ Генерируем контент сайта через AI...');
    
    // Генерация HTML через LLM
    const llmResponse = await generateTextWithLLM({
      prompt,
      systemPrompt
    });
    
    // Обработка ответа LLM и создание сайта
    const result = await processLLMResponse(llmResponse, siteConfig);
    
    if (result.status === 'error') {
      throw new Error(result.message);
    }
    
    // Загрузка ZIP-файла в S3
    const s3BucketName = process.env.AWS_S3_BUCKET_NAME;
    const randomNumber = generateRandom15DigitNumber();
    const s3Key = `${track_id}_${randomNumber}.zip`;
    
    sendToClientWithUserId(track_id, '📤 Загружаем готовый сайт...');
    const s3Url = await uploadToS3(result.zipPath, s3BucketName, s3Key);
    
    // Отправка уведомления
    const webhookUrl = `https://aisitegen.onrender.com/api/v1/generatorTelegram/webhook/?user_id=${encodeURIComponent(track_id)}`;
    await sendToWebhook(webhookUrl, { track_id, s3Url, webhookUrl, status: 'succeeded' });
    
    sendToClientWithUserId(track_id, '✅ Вайтпейдж успешно создан!');
    
  } catch (error) {
    console.error('Error processing site:', error);
    sendToClientWithUserId(track_id, { status: 'processing_failed', message: error.message });
  }
}
```

## Интеграция с Telegram-ботом

### Добавление выбора стиля сайта
Необходимо модифицировать бота для добавления шага выбора стиля сайта:

```javascript
// Пример функции-обработчика для выбора стиля сайта
bot.action(/style_(.+)/, async (ctx) => {
  const style = ctx.match[1];
  ctx.session.site_style = style;
  
  await ctx.editMessageText(
    `Выбран стиль сайта: ${getStyleNameRu(style)}\n\nВыберите формат файлов:`,
    {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'HTML', callback_data: 'format_html' }, { text: 'PHP', callback_data: 'format_php' }]
        ]
      }
    }
  );
});

// Функция для получения названия стиля на русском языке
function getStyleNameRu(style) {
  const styles = {
    minimalist: 'Минималистичный',
    corporate: 'Корпоративный',
    creative: 'Креативный',
    ecommerce: 'Интернет-магазин',
    gaming: 'Игровой',
    luxury: 'Премиальный',
    news: 'Новостной'
  };
  
  return styles[style] || 'Стандартный';
}
```

## Рекомендации по внедрению

1. **Постепенное внедрение**:
   - Сначала реализовать базовую версию интеграции с Replicate API
   - Протестировать на нескольких стилях
   - Постепенно расширять функциональность

2. **Оптимизация промптов**:
   - Регулярно анализировать и улучшать промпты для разных стилей
   - Собирать обратную связь от пользователей о качестве генерации

3. **Безопасность**:
   - Всегда проверять входные данные перед формированием промптов
   - Использовать систему фильтрации для предотвращения генерации нежелательного контента

4. **Производительность**:
   - Реализовать кэширование для часто используемых элементов
   - Оптимизировать размер запросов к Replicate API

## Заключение

Данное техническое задание описывает необходимые изменения для модернизации существующего кода генерации сайтов. Основной акцент сделан на замене старой логики генерации шаблонов на использование LLM через Replicate API, а также на добавлении возможности выбора стиля сайта в интерфейсе Telegram-бота.

Внедрение этих изменений позволит:
1. Увеличить разнообразие и уникальность генерируемых сайтов
2. Предоставить пользователям больше контроля над дизайном сайта
3. Сделать процесс генерации более гибким и адаптивным

Техническое задание составлено корректно и содержит все необходимые детали для реализации проекта.
